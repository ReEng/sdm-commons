-- @nsURI GM=http://www.eclipse.org/gmf/2009/GenModel


module storydiagrams;
create OUT: GM refining IN: GM;

-- fix source folder, file extensions
rule FixGenEditorGenerator {
	from
		gegin: GM!GenEditorGenerator (
			gegin.packageNamePrefix = 'org.storydriven.storydiagrams.diagram'
		)
	to
		gegout: GM!GenEditorGenerator (
			domainFileExtension <- 'sdm',
			diagramFileExtension <- 'sdm_diagram',
			pluginDirectory <- '/org.storydriven.storydiagrams.diagram/src-gen'
		)
}

-- enable print
rule EnablePrint {
	from
		input_name: GM!GenPlugin
	to
		output_name: GM!GenPlugin (
			printingEnabled <- true
		)
}

-- raw property tab
rule EditRawPropertyTab {
	from
		tin: GM!GenPropertyTab (
			tin.iD = 'domain'
		)
	to
		tout: GM!GenPropertyTab (
			iD <- 'raw',
			label <- 'Raw'
		)
}

-- make wrapping label edit parts have stable names
rule CollectionVariableNameLabel {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getCollectionVariableNameLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'CollectionVariableNameLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'CollectionVariableNameLabelItemSemanticEditPolicy'
		)
}

rule ActivityCallNodeCalleeLabel {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getActivityCallNodeCalleeLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'ActivityCallNodeCalleeLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'ActivityCallNodeCalleeLabelItemSemanticEditPolicy'
		)
}

rule StatementNodeExpressionLabel {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getStatementNodeExpressionLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'StatementNodeExpressionLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'StatementNodeExpressionLabelItemSemanticEditPolicy'
		)
}

rule StartNodeSignatureLabel {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getStartNodeSignatureLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'StartNodeSignatureLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'StartNodeSignatureLabelItemSemanticEditPolicy'
		)
}

rule StopNodeSignatureLabel {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getStopNodeSignatureLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'StopNodeSignatureLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'StopNodeSignatureLabelItemSemanticEditPolicy'
		)
}

-- ##################################################################
-- unstructured
-- ##################################################################
rule GenCompartment1 {
	from
		gcin: GM!GenCompartment (
			gcin.editPartClassName = 'StoryPatternStoryPatternCompartementEditPart'
		)
	to
		gcout: GM!GenCompartment (
			listLayout <- false,
			canCollapse <- true
		)
}

rule GenCompartment2 {
	from
		gcin: GM!GenCompartment (
			gcin.editPartClassName = 'MatchingPatternStoryPatternCompartementEditPart'
		)
	to
		gcout: GM!GenCompartment (
			listLayout <- false
		)
}

rule GenNodeLabel1 {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getFigureObjectVariableModifierLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'ObjectVariableBindingOperatorEditPart',
			itemSemanticEditPolicyClassName <-
					'ObjectVariableBindingOperatorItemSemanticEditPolicy'
		)
}

rule GenNodeLabel2 {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getFigureObjectVariableClassifierLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'ObjectVariableClassifierLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'ObjectVariableClassifierItemSemanticEditPolicy'
		)
}

rule GenNodeLabel3 {
	from
		gnlin: GM!GenNodeLabel (
			if (gnlin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gnlin.viewmap.getterName = 'getFigurePrimitiveVariableClassifierLabel'
		else
			false
		endif
		)
	to
		gnlout: GM!GenNodeLabel (
			editPartClassName <- 'PrimitiveVariableClassifierLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'PrimitiveVariableClassifierLabelItemSemanticEditPolicy'
		)
}

rule GenLinkLabel1 {
	from
		gllin: GM!GenLinkLabel (
			if (gllin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gllin.viewmap.getterName = 'getFigureActivityEdgeGuardFigure'
		else
			false
		endif
		)
	to
		gllout: GM!GenLinkLabel (
			editPartClassName <- 'ActivityEdgeGuardConstraintLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'ActivityEdgeGuardConstraintLabelItemSemanticEditPolicy'
		)
}

rule GenLinkLabel2 {
	from
		gllin: GM!GenLinkLabel (
			if (gllin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gllin.viewmap.getterName = 'getFigureLinkVariableTargetEndFigure'
		else
			false
		endif
		)
	to
		gllout: GM!GenLinkLabel (
			editPartClassName <- 'LinkVariableTargetEndLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'LinkVariableTargetEndLabelItemSemanticEditPolicy'
		)
}

rule GenLinkLabel3 {
	from
		gllin: GM!GenLinkLabel (
			if (gllin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gllin.viewmap.getterName = 'getFigureLinkVariableSourceEndFigure'
		else
			false
		endif
		)
	to
		gllout: GM!GenLinkLabel (
			editPartClassName <- 'LinkVariableSourceEndLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'LinkVariableSourceEndLabelItemSemanticEditPolicy'
		)
}

rule GenLinkLabel4 {
	from
		gllin: GM!GenLinkLabel (
			if (gllin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gllin.viewmap.getterName = 'getFigureLinkVariableOperatorFigure'
		else
			false
		endif
		)
	to
		gllout: GM!GenLinkLabel (
			editPartClassName <- 'LinkVariableOperatorLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'LinkVariableOperatorLabelItemSemanticEditPolicy'
		)
}

rule GenLinkLabel5 {
	from
		gllin: GM!GenLinkLabel (
			if (gllin.viewmap.oclIsKindOf(GM!ParentAssignedViewmap)) then
			gllin.viewmap.getterName = 'getFigureContainmentRelationOperatorFigure'
		else
			false
		endif
		)
	to
		gllout: GM!GenLinkLabel (
			editPartClassName <- 'ContainmentRelationOperatorLabelEditPart',
			itemSemanticEditPolicyClassName <-
					'ContainmentRelationOperatorLabelItemSemanticEditPolicy'
		)
}
