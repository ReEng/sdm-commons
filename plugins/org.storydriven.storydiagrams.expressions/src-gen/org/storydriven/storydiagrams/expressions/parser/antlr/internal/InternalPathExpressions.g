/*
* generated by Xtext
*/
grammar InternalPathExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.storydriven.storydiagrams.expressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.storydriven.storydiagrams.expressions.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.storydriven.storydiagrams.expressions.services.PathExpressionsGrammarAccess;

}

@parser::members {

 	private PathExpressionsGrammarAccess grammarAccess;
 	
    public InternalPathExpressionsParser(TokenStream input, PathExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PathExpression";	
   	}
   	
   	@Override
   	protected PathExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePathExpression
entryRulePathExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathExpressionRule()); }
	 iv_rulePathExpression=rulePathExpression 
	 { $current=$iv_rulePathExpression.current; } 
	 EOF 
;

// Rule PathExpression
rulePathExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_0_0()); 
	    }
		lv_pathAlternatives_0_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExpressionRule());
	        }
       		add(
       			$current, 
       			"pathAlternatives",
        		lv_pathAlternatives_0_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_1_1_0()); 
	    }
		lv_pathAlternatives_2_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExpressionRule());
	        }
       		add(
       			$current, 
       			"pathAlternatives",
        		lv_pathAlternatives_2_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPathExpressionAccess().getRightParenthesisKeyword_1_2());
    }
(	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPathExpressionAccess().getVerticalLineKeyword_1_3_0());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPathExpressionAccess().getLeftParenthesisKeyword_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_1_3_2_0()); 
	    }
		lv_pathAlternatives_6_0=rulePath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathExpressionRule());
	        }
       		add(
       			$current, 
       			"pathAlternatives",
        		lv_pathAlternatives_6_0, 
        		"Path");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPathExpressionAccess().getRightParenthesisKeyword_1_3_3());
    }
)+))
;





// Entry rule entryRulePath
entryRulePath returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current; } 
	 EOF 
;

// Rule Path
rulePath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getSegmentsPathSegmentParserRuleCall_0_0()); 
	    }
		lv_segments_0_0=rulePathSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_0_0, 
        		"PathSegment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathAccess().getSegmentsPathSegmentParserRuleCall_1_1_0()); 
	    }
		lv_segments_2_0=rulePathSegment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathRule());
	        }
       		add(
       			$current, 
       			"segments",
        		lv_segments_2_0, 
        		"PathSegment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePathSegment
entryRulePathSegment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathSegmentRule()); }
	 iv_rulePathSegment=rulePathSegment 
	 { $current=$iv_rulePathSegment.current; } 
	 EOF 
;

// Rule PathSegment
rulePathSegment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_0_0()); 
	    }
		lv_alternatives_0_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathSegmentRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_0_0, 
        		"PathSegmentDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPathSegmentAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_1_1_0()); 
	    }
		lv_alternatives_2_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathSegmentRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_2_0, 
        		"PathSegmentDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPathSegmentAccess().getVerticalLineKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_1_2_1_0()); 
	    }
		lv_alternatives_4_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathSegmentRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_4_0, 
        		"PathSegmentDescription");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPathSegmentAccess().getRightParenthesisKeyword_0_1_3());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPathSegmentAccess().getRepeatOperatorRepeatOperatorEnumRuleCall_1_0()); 
	    }
		lv_repeatOperator_6_0=ruleRepeatOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathSegmentRule());
	        }
       		set(
       			$current, 
       			"repeatOperator",
        		lv_repeatOperator_6_0, 
        		"RepeatOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePathSegmentDescription
entryRulePathSegmentDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathSegmentDescriptionRule()); }
	 iv_rulePathSegmentDescription=rulePathSegmentDescription 
	 { $current=$iv_rulePathSegmentDescription.current; } 
	 EOF 
;

// Rule PathSegmentDescription
rulePathSegmentDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getImplicitPathDescriptionParserRuleCall_0_0()); 
    }
    this_ImplicitPathDescription_0=ruleImplicitPathDescription
    { 
        $current = $this_ImplicitPathDescription_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getExplicitPathDescriptionParserRuleCall_0_1()); 
    }
    this_ExplicitPathDescription_1=ruleExplicitPathDescription
    { 
        $current = $this_ExplicitPathDescription_1.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getRestrictionListRestrictionListParserRuleCall_1_0()); 
	    }
		lv_restrictionList_2_0=ruleRestrictionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathSegmentDescriptionRule());
	        }
       		set(
       			$current, 
       			"restrictionList",
        		lv_restrictionList_2_0, 
        		"RestrictionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleRestrictionList
entryRuleRestrictionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRestrictionListRule()); }
	 iv_ruleRestrictionList=ruleRestrictionList 
	 { $current=$iv_ruleRestrictionList.current; } 
	 EOF 
;

// Rule RestrictionList
ruleRestrictionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRestrictionListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionListAccess().getRestrictionsTypeRestrictionParserRuleCall_1_0()); 
	    }
		lv_restrictions_1_0=ruleTypeRestriction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionListRule());
	        }
       		add(
       			$current, 
       			"restrictions",
        		lv_restrictions_1_0, 
        		"TypeRestriction");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRestrictionListAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictionListAccess().getRestrictionsTypeRestrictionParserRuleCall_2_1_0()); 
	    }
		lv_restrictions_3_0=ruleTypeRestriction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictionListRule());
	        }
       		add(
       			$current, 
       			"restrictions",
        		lv_restrictions_3_0, 
        		"TypeRestriction");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRestrictionListAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleImplicitPathDescription
entryRuleImplicitPathDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicitPathDescriptionRule()); }
	 iv_ruleImplicitPathDescription=ruleImplicitPathDescription 
	 { $current=$iv_ruleImplicitPathDescription.current; } 
	 EOF 
;

// Rule ImplicitPathDescription
ruleImplicitPathDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplicitPathDescriptionAccess().getKindImplicitPathKindEnumRuleCall_0()); 
	    }
		lv_kind_0_0=ruleImplicitPathKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplicitPathDescriptionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"ImplicitPathKind");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExplicitPathDescription
entryRuleExplicitPathDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicitPathDescriptionRule()); }
	 iv_ruleExplicitPathDescription=ruleExplicitPathDescription 
	 { $current=$iv_ruleExplicitPathDescription.current; } 
	 EOF 
;

// Rule ExplicitPathDescription
ruleExplicitPathDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_associationName_0_0=RULE_ID
		{
			newLeafNode(lv_associationName_0_0, grammarAccess.getExplicitPathDescriptionAccess().getAssociationNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExplicitPathDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"associationName",
        		lv_associationName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTypeRestriction
entryRuleTypeRestriction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRestrictionRule()); }
	 iv_ruleTypeRestriction=ruleTypeRestriction 
	 { $current=$iv_ruleTypeRestriction.current; } 
	 EOF 
;

// Rule TypeRestriction
ruleTypeRestriction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_forbidden_0_0=	'!' 
    {
        newLeafNode(lv_forbidden_0_0, grammarAccess.getTypeRestrictionAccess().getForbiddenExclamationMarkKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRestrictionRule());
	        }
       		setWithLastConsumed($current, "forbidden", true, "!");
	    }

)
)?(
(
		lv_typeName_1_0=RULE_ID
		{
			newLeafNode(lv_typeName_1_0, grammarAccess.getTypeRestrictionAccess().getTypeNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRestrictionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeName",
        		lv_typeName_1_0, 
        		"ID");
	    }

)
))
;





// Rule RepeatOperator
ruleRepeatOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='NO_REPEAT' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getNO_REPEATEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRepeatOperatorAccess().getNO_REPEATEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getAT_LEAST_ONCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRepeatOperatorAccess().getAT_LEAST_ONCEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getARBITRARYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRepeatOperatorAccess().getARBITRARYEnumLiteralDeclaration_2()); 
    }
));



// Rule ImplicitPathKind
ruleImplicitPathKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-->' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getImplicitPathKindAccess().getANYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>-->' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_SOURCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_SOURCEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='--><>' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_TARGETEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_TARGETEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


