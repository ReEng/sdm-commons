/*
* generated by Xtext
*/
package org.storydriven.modeling.expressions.common.ui.labeling;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.storydriven.modeling.expressions.common.expressions.BooleanValue;
import org.storydriven.modeling.expressions.common.expressions.NumberValue;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ExpressionsLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ExpressionsLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


   @Override
   public
   String text(Object ele)
   {
      if(ele instanceof EObject)
      {
         if(ele instanceof BooleanValue)
         {
            BooleanValue b = (BooleanValue)ele;
            
            return b.getVarName() != null? b.getVarName() : String.valueOf(b.isValue()); 
         }
         else if(ele instanceof NumberValue)
         {
            NumberValue n = (NumberValue)ele;
            
            return n.getVarName() != null? n.getVarName() : String.valueOf(n.getNumValue().doubleValue()); 
         }
         return ((EObject)ele).eClass().getName();
      }
      return ele.toString();
   }
   

/*
	//Labels and icons can be computed like this:
	
	String text(MyModel ele) {
	  return "my "+ele.getName();
	}
	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
}
