/**
 */
package de.mdelab.sdm.interpreter.core.executionTrace.provider;

import de.mdelab.sdm.interpreter.core.executionTrace.ExecutionTracePackage;

import de.mdelab.sdm.interpreter.core.executionTrace.util.ExecutionTraceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExecutionTraceItemProviderAdapterFactory extends ExecutionTraceAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable, IChildCreationExtender
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory		parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier				changeNotifier					= new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager	childCreationExtenderManager	= new ChildCreationExtenderManager(
																					ExecutionTraceEditPlugin.INSTANCE,
																					ExecutionTracePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object>			supportedTypes					= new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExecutionTraceItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapEntryItemProvider	mapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapEntryAdapter()
	{
		if (mapEntryItemProvider == null)
		{
			mapEntryItemProvider = new MapEntryItemProvider(this);
		}

		return mapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.ExecutionTrace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionTraceItemProvider	executionTraceItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.ExecutionTrace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionTraceAdapter()
	{
		if (executionTraceItemProvider == null)
		{
			executionTraceItemProvider = new ExecutionTraceItemProvider(this);
		}

		return executionTraceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityExecutionItemProvider	activityExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityExecutionAdapter()
	{
		if (activityExecutionItemProvider == null)
		{
			activityExecutionItemProvider = new ActivityExecutionItemProvider(this);
		}

		return activityExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityNodeExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeExecutionItemProvider	activityNodeExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityNodeExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeExecutionAdapter()
	{
		if (activityNodeExecutionItemProvider == null)
		{
			activityNodeExecutionItemProvider = new ActivityNodeExecutionItemProvider(this);
		}

		return activityNodeExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityEdgeTraversal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeTraversalItemProvider	activityEdgeTraversalItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.ActivityEdgeTraversal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeTraversalAdapter()
	{
		if (activityEdgeTraversalItemProvider == null)
		{
			activityEdgeTraversalItemProvider = new ActivityEdgeTraversalItemProvider(this);
		}

		return activityEdgeTraversalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternInitialization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternInitializationItemProvider	storyPatternInitializationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternInitialization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternInitializationAdapter()
	{
		if (storyPatternInitializationItemProvider == null)
		{
			storyPatternInitializationItemProvider = new StoryPatternInitializationItemProvider(this);
		}

		return storyPatternInitializationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternMatching} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternMatchingItemProvider	storyPatternMatchingItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternMatching}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternMatchingAdapter()
	{
		if (storyPatternMatchingItemProvider == null)
		{
			storyPatternMatchingItemProvider = new StoryPatternMatchingItemProvider(this);
		}

		return storyPatternMatchingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternApplicationItemProvider	storyPatternApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternApplicationAdapter()
	{
		if (storyPatternApplicationItemProvider == null)
		{
			storyPatternApplicationItemProvider = new StoryPatternApplicationItemProvider(this);
		}

		return storyPatternApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectBound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternObjectBoundItemProvider	storyPatternObjectBoundItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectBound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternObjectBoundAdapter()
	{
		if (storyPatternObjectBoundItemProvider == null)
		{
			storyPatternObjectBoundItemProvider = new StoryPatternObjectBoundItemProvider(this);
		}

		return storyPatternObjectBoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectNotBound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternObjectNotBoundItemProvider	storyPatternObjectNotBoundItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectNotBound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternObjectNotBoundAdapter()
	{
		if (storyPatternObjectNotBoundItemProvider == null)
		{
			storyPatternObjectNotBoundItemProvider = new StoryPatternObjectNotBoundItemProvider(this);
		}

		return storyPatternObjectNotBoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectBindingRevoked} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternObjectBindingRevokedItemProvider	storyPatternObjectBindingRevokedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectBindingRevoked}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternObjectBindingRevokedAdapter()
	{
		if (storyPatternObjectBindingRevokedItemProvider == null)
		{
			storyPatternObjectBindingRevokedItemProvider = new StoryPatternObjectBindingRevokedItemProvider(this);
		}

		return storyPatternObjectBindingRevokedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.TraversingLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraversingLinkItemProvider	traversingLinkItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.TraversingLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraversingLinkAdapter()
	{
		if (traversingLinkItemProvider == null)
		{
			traversingLinkItemProvider = new TraversingLinkItemProvider(this);
		}

		return traversingLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.LinkCheckSuccessful} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkCheckSuccessfulItemProvider	linkCheckSuccessfulItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.LinkCheckSuccessful}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkCheckSuccessfulAdapter()
	{
		if (linkCheckSuccessfulItemProvider == null)
		{
			linkCheckSuccessfulItemProvider = new LinkCheckSuccessfulItemProvider(this);
		}

		return linkCheckSuccessfulItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.LinkCheckFailed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkCheckFailedItemProvider	linkCheckFailedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.LinkCheckFailed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkCheckFailedAdapter()
	{
		if (linkCheckFailedItemProvider == null)
		{
			linkCheckFailedItemProvider = new LinkCheckFailedItemProvider(this);
		}

		return linkCheckFailedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.ExpressionEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionEvaluationItemProvider	expressionEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.ExpressionEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionEvaluationAdapter()
	{
		if (expressionEvaluationItemProvider == null)
		{
			expressionEvaluationItemProvider = new ExpressionEvaluationItemProvider(this);
		}

		return expressionEvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceObjectCreation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceObjectCreationItemProvider	instanceObjectCreationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceObjectCreation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceObjectCreationAdapter()
	{
		if (instanceObjectCreationItemProvider == null)
		{
			instanceObjectCreationItemProvider = new InstanceObjectCreationItemProvider(this);
		}

		return instanceObjectCreationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceObjectDeletion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceObjectDeletionItemProvider	instanceObjectDeletionItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceObjectDeletion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceObjectDeletionAdapter()
	{
		if (instanceObjectDeletionItemProvider == null)
		{
			instanceObjectDeletionItemProvider = new InstanceObjectDeletionItemProvider(this);
		}

		return instanceObjectDeletionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceLinkCreation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceLinkCreationItemProvider	instanceLinkCreationItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceLinkCreation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceLinkCreationAdapter()
	{
		if (instanceLinkCreationItemProvider == null)
		{
			instanceLinkCreationItemProvider = new InstanceLinkCreationItemProvider(this);
		}

		return instanceLinkCreationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceLinkDeletion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceLinkDeletionItemProvider	instanceLinkDeletionItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.InstanceLinkDeletion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceLinkDeletionAdapter()
	{
		if (instanceLinkDeletionItemProvider == null)
		{
			instanceLinkDeletionItemProvider = new InstanceLinkDeletionItemProvider(this);
		}

		return instanceLinkDeletionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.AttributeValueSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeValueSetItemProvider	attributeValueSetItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.AttributeValueSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeValueSetAdapter()
	{
		if (attributeValueSetItemProvider == null)
		{
			attributeValueSetItemProvider = new AttributeValueSetItemProvider(this);
		}

		return attributeValueSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableCreated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableCreatedItemProvider	variableCreatedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableCreated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableCreatedAdapter()
	{
		if (variableCreatedItemProvider == null)
		{
			variableCreatedItemProvider = new VariableCreatedItemProvider(this);
		}

		return variableCreatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableDeleted} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeletedItemProvider	variableDeletedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableDeleted}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeletedAdapter()
	{
		if (variableDeletedItemProvider == null)
		{
			variableDeletedItemProvider = new VariableDeletedItemProvider(this);
		}

		return variableDeletedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableChangedItemProvider	variableChangedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.VariableChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableChangedAdapter()
	{
		if (variableChangedItemProvider == null)
		{
			variableChangedItemProvider = new VariableChangedItemProvider(this);
		}

		return variableChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectConstraintHolds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternObjectConstraintHoldsItemProvider	storyPatternObjectConstraintHoldsItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectConstraintHolds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternObjectConstraintHoldsAdapter()
	{
		if (storyPatternObjectConstraintHoldsItemProvider == null)
		{
			storyPatternObjectConstraintHoldsItemProvider = new StoryPatternObjectConstraintHoldsItemProvider(this);
		}

		return storyPatternObjectConstraintHoldsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectConstraintViolated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternObjectConstraintViolatedItemProvider	storyPatternObjectConstraintViolatedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternObjectConstraintViolated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternObjectConstraintViolatedAdapter()
	{
		if (storyPatternObjectConstraintViolatedItemProvider == null)
		{
			storyPatternObjectConstraintViolatedItemProvider = new StoryPatternObjectConstraintViolatedItemProvider(this);
		}

		return storyPatternObjectConstraintViolatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternConstraintHolds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternConstraintHoldsItemProvider	storyPatternConstraintHoldsItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternConstraintHolds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternConstraintHoldsAdapter()
	{
		if (storyPatternConstraintHoldsItemProvider == null)
		{
			storyPatternConstraintHoldsItemProvider = new StoryPatternConstraintHoldsItemProvider(this);
		}

		return storyPatternConstraintHoldsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternConstraintViolated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryPatternConstraintViolatedItemProvider	storyPatternConstraintViolatedItemProvider;

	/**
	 * This creates an adapter for a {@link de.mdelab.sdm.interpreter.core.executionTrace.StoryPatternConstraintViolated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryPatternConstraintViolatedAdapter()
	{
		if (storyPatternConstraintViolatedItemProvider == null)
		{
			storyPatternConstraintViolatedItemProvider = new StoryPatternConstraintViolatedItemProvider(this);
		}

		return storyPatternConstraintViolatedItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders()
	{
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
	{
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator()
	{
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (mapEntryItemProvider != null)
			mapEntryItemProvider.dispose();
		if (executionTraceItemProvider != null)
			executionTraceItemProvider.dispose();
		if (activityExecutionItemProvider != null)
			activityExecutionItemProvider.dispose();
		if (activityNodeExecutionItemProvider != null)
			activityNodeExecutionItemProvider.dispose();
		if (activityEdgeTraversalItemProvider != null)
			activityEdgeTraversalItemProvider.dispose();
		if (storyPatternInitializationItemProvider != null)
			storyPatternInitializationItemProvider.dispose();
		if (storyPatternMatchingItemProvider != null)
			storyPatternMatchingItemProvider.dispose();
		if (storyPatternApplicationItemProvider != null)
			storyPatternApplicationItemProvider.dispose();
		if (storyPatternObjectBoundItemProvider != null)
			storyPatternObjectBoundItemProvider.dispose();
		if (storyPatternObjectNotBoundItemProvider != null)
			storyPatternObjectNotBoundItemProvider.dispose();
		if (storyPatternObjectBindingRevokedItemProvider != null)
			storyPatternObjectBindingRevokedItemProvider.dispose();
		if (traversingLinkItemProvider != null)
			traversingLinkItemProvider.dispose();
		if (linkCheckSuccessfulItemProvider != null)
			linkCheckSuccessfulItemProvider.dispose();
		if (linkCheckFailedItemProvider != null)
			linkCheckFailedItemProvider.dispose();
		if (expressionEvaluationItemProvider != null)
			expressionEvaluationItemProvider.dispose();
		if (instanceObjectCreationItemProvider != null)
			instanceObjectCreationItemProvider.dispose();
		if (instanceObjectDeletionItemProvider != null)
			instanceObjectDeletionItemProvider.dispose();
		if (instanceLinkCreationItemProvider != null)
			instanceLinkCreationItemProvider.dispose();
		if (instanceLinkDeletionItemProvider != null)
			instanceLinkDeletionItemProvider.dispose();
		if (attributeValueSetItemProvider != null)
			attributeValueSetItemProvider.dispose();
		if (variableCreatedItemProvider != null)
			variableCreatedItemProvider.dispose();
		if (variableDeletedItemProvider != null)
			variableDeletedItemProvider.dispose();
		if (variableChangedItemProvider != null)
			variableChangedItemProvider.dispose();
		if (storyPatternObjectConstraintHoldsItemProvider != null)
			storyPatternObjectConstraintHoldsItemProvider.dispose();
		if (storyPatternObjectConstraintViolatedItemProvider != null)
			storyPatternObjectConstraintViolatedItemProvider.dispose();
		if (storyPatternConstraintHoldsItemProvider != null)
			storyPatternConstraintHoldsItemProvider.dispose();
		if (storyPatternConstraintViolatedItemProvider != null)
			storyPatternConstraintViolatedItemProvider.dispose();
	}

}
