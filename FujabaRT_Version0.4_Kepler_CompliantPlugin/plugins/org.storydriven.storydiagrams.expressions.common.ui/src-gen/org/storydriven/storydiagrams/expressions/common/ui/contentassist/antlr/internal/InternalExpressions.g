/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.storydriven.storydiagrams.expressions.common.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.storydriven.storydiagrams.expressions.common.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.storydriven.storydiagrams.expressions.common.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLExpression
entryRuleLExpression 
:
{ before(grammarAccess.getLExpressionRule()); }
	 ruleLExpression
{ after(grammarAccess.getLExpressionRule()); } 
	 EOF 
;

// Rule LExpression
ruleLExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLExpressionAccess().getEquivalentParserRuleCall()); }
	ruleEquivalent
{ after(grammarAccess.getLExpressionAccess().getEquivalentParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquivalent
entryRuleEquivalent 
:
{ before(grammarAccess.getEquivalentRule()); }
	 ruleEquivalent
{ after(grammarAccess.getEquivalentRule()); } 
	 EOF 
;

// Rule Equivalent
ruleEquivalent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEquivalentAccess().getGroup()); }
(rule__Equivalent__Group__0)
{ after(grammarAccess.getEquivalentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplication
entryRuleImplication 
:
{ before(grammarAccess.getImplicationRule()); }
	 ruleImplication
{ after(grammarAccess.getImplicationRule()); } 
	 EOF 
;

// Rule Implication
ruleImplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicationAccess().getGroup()); }
(rule__Implication__Group__0)
{ after(grammarAccess.getImplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDisjunction
entryRuleDisjunction 
:
{ before(grammarAccess.getDisjunctionRule()); }
	 ruleDisjunction
{ after(grammarAccess.getDisjunctionRule()); } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup()); }
(rule__Disjunction__Group__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegation
entryRuleNegation 
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationAccess().getAlternatives()); }
(rule__Negation__Alternatives)
{ after(grammarAccess.getNegationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegated
entryRuleNegated 
:
{ before(grammarAccess.getNegatedRule()); }
	 ruleNegated
{ after(grammarAccess.getNegatedRule()); } 
	 EOF 
;

// Rule Negated
ruleNegated
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegatedAccess().getGroup()); }
(rule__Negated__Group__0)
{ after(grammarAccess.getNegatedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCExpression
entryRuleCExpression 
:
{ before(grammarAccess.getCExpressionRule()); }
	 ruleCExpression
{ after(grammarAccess.getCExpressionRule()); } 
	 EOF 
;

// Rule CExpression
ruleCExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCExpressionAccess().getAlternatives()); }
(rule__CExpression__Alternatives)
{ after(grammarAccess.getCExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompare
entryRuleCompare 
:
{ before(grammarAccess.getCompareRule()); }
	 ruleCompare
{ after(grammarAccess.getCompareRule()); } 
	 EOF 
;

// Rule Compare
ruleCompare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareAccess().getGroup()); }
(rule__Compare__Group__0)
{ after(grammarAccess.getCompareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSomeValue
entryRuleSomeValue 
:
{ before(grammarAccess.getSomeValueRule()); }
	 ruleSomeValue
{ after(grammarAccess.getSomeValueRule()); } 
	 EOF 
;

// Rule SomeValue
ruleSomeValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSomeValueAccess().getAlternatives()); }
(rule__SomeValue__Alternatives)
{ after(grammarAccess.getSomeValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExpression
entryRuleAExpression 
:
{ before(grammarAccess.getAExpressionRule()); }
	 ruleAExpression
{ after(grammarAccess.getAExpressionRule()); } 
	 EOF 
;

// Rule AExpression
ruleAExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExpressionAccess().getAdditionParserRuleCall()); }
	ruleAddition
{ after(grammarAccess.getAExpressionAccess().getAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePower
entryRulePower 
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerAccess().getGroup()); }
(rule__Power__Group__0)
{ after(grammarAccess.getPowerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberValue
entryRuleNumberValue 
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberValueAccess().getNumValueAssignment()); }
(rule__NumberValue__NumValueAssignment)
{ after(grammarAccess.getNumberValueAccess().getNumValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNUMBER
entryRuleNUMBER 
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNUMBERAccess().getGroup()); }
(rule__NUMBER__Group__0)
{ after(grammarAccess.getNUMBERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getStrValueAssignment()); }
(rule__StringValue__StrValueAssignment)
{ after(grammarAccess.getStringValueAccess().getStrValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getVarNameAssignment()); }
(rule__Variable__VarNameAssignment)
{ after(grammarAccess.getVariableAccess().getVarNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVARIABLE_VALUE
entryRuleVARIABLE_VALUE 
:
{ before(grammarAccess.getVARIABLE_VALUERule()); }
	 ruleVARIABLE_VALUE
{ after(grammarAccess.getVARIABLE_VALUERule()); } 
	 EOF 
;

// Rule VARIABLE_VALUE
ruleVARIABLE_VALUE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getAlternatives()); }
(rule__VARIABLE_VALUE__Alternatives)
{ after(grammarAccess.getVARIABLE_VALUEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Disjunction__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup_1_0_0()); }
(rule__Disjunction__Group_1_0_0__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getDisjunctionAccess().getGroup_1_0_1()); }
(rule__Disjunction__Group_1_0_1__0)
{ after(grammarAccess.getDisjunctionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getGroup_0()); }
(rule__Negation__Group_0__0)
{ after(grammarAccess.getNegationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegationAccess().getCExpressionParserRuleCall_1()); }
	ruleCExpression
{ after(grammarAccess.getNegationAccess().getCExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCExpressionAccess().getGroup_0()); }
(rule__CExpression__Group_0__0)
{ after(grammarAccess.getCExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCExpressionAccess().getCompareParserRuleCall_1()); }
	ruleCompare
{ after(grammarAccess.getCExpressionAccess().getCompareParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCExpressionAccess().getBooleanValueParserRuleCall_2()); }
	ruleBooleanValue
{ after(grammarAccess.getCExpressionAccess().getBooleanValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getCExpressionAccess().getVariableParserRuleCall_3()); }
	ruleVariable
{ after(grammarAccess.getCExpressionAccess().getVariableParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getGroup_1_0()); }
(rule__Compare__Group_1_0__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_1()); }
(rule__Compare__Group_1_1__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_2()); }
(rule__Compare__Group_1_2__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_3()); }
(rule__Compare__Group_1_3__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_3()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_4()); }
(rule__Compare__Group_1_4__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_4()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_5()); }
(rule__Compare__Group_1_5__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_5()); }
)

    |(
{ before(grammarAccess.getCompareAccess().getGroup_1_6()); }
(rule__Compare__Group_1_6__0)
{ after(grammarAccess.getCompareAccess().getGroup_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SomeValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSomeValueAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getSomeValueAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSomeValueAccess().getBooleanValueParserRuleCall_1()); }
	ruleBooleanValue
{ after(grammarAccess.getSomeValueAccess().getBooleanValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSomeValueAccess().getAExpressionParserRuleCall_2()); }
	ruleAExpression
{ after(grammarAccess.getSomeValueAccess().getAExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
(rule__Multiplication__Group_1_0_2__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
(rule__PrimaryExpression__Group_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNumberValueParserRuleCall_1()); }
	ruleNumberValue
{ after(grammarAccess.getPrimaryExpressionAccess().getNumberValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableParserRuleCall_2()); }
	ruleVariable
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLE_VALUE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getGroup_1()); }
(rule__VARIABLE_VALUE__Group_1__0)
{ after(grammarAccess.getVARIABLE_VALUEAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Equivalent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equivalent__Group__0__Impl
	rule__Equivalent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getImplicationParserRuleCall_0()); }
	ruleImplication
{ after(grammarAccess.getEquivalentAccess().getImplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equivalent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equivalent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getGroup_1()); }
(rule__Equivalent__Group_1__0)?
{ after(grammarAccess.getEquivalentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equivalent__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equivalent__Group_1__0__Impl
	rule__Equivalent__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalent__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equivalent__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equivalent__Group_1__1__Impl
	rule__Equivalent__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalent__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getEquivKeyword_1_1()); }

	'equiv' 

{ after(grammarAccess.getEquivalentAccess().getEquivKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equivalent__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equivalent__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equivalent__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getRightAssignment_1_2()); }
(rule__Equivalent__RightAssignment_1_2)
{ after(grammarAccess.getEquivalentAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Implication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__0__Impl
	rule__Implication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
	ruleDisjunction
{ after(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getGroup_1()); }
(rule__Implication__Group_1__0)?
{ after(grammarAccess.getImplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Implication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__0__Impl
	rule__Implication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getImplyLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImplicationAccess().getImplyLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__1__Impl
	rule__Implication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getImplyKeyword_1_1()); }

	'imply' 

{ after(grammarAccess.getImplicationAccess().getImplyKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Implication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Implication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
(rule__Implication__RightAssignment_1_2)
{ after(grammarAccess.getImplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Disjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__0__Impl
	rule__Disjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
	ruleConjunction
{ after(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getGroup_1()); }
(rule__Disjunction__Group_1__0)?
{ after(grammarAccess.getDisjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Disjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__0__Impl
	rule__Disjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getAlternatives_1_0()); }
(rule__Disjunction__Alternatives_1_0)
{ after(grammarAccess.getDisjunctionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightAssignment_1_1()); }
(rule__Disjunction__RightAssignment_1_1)
{ after(grammarAccess.getDisjunctionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Disjunction__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1_0_0__0__Impl
	rule__Disjunction__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getOrKeyword_1_0_0_1()); }

	'or' 

{ after(grammarAccess.getDisjunctionAccess().getOrKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Disjunction__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1_0_1__0__Impl
	rule__Disjunction__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Disjunction__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Disjunction__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getXorKeyword_1_0_1_1()); }

	'xor' 

{ after(grammarAccess.getDisjunctionAccess().getXorKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); }
	ruleNegation
{ after(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)?
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
	rule__Conjunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getConjunctionAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
(rule__Conjunction__RightAssignment_1_2)
{ after(grammarAccess.getConjunctionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Negation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group_0__0__Impl
	rule__Negation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getNegationAccess().getNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1()); }
	ruleNegated
{ after(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Negated__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negated__Group__0__Impl
	rule__Negated__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotAction_0()); }
(

)
{ after(grammarAccess.getNegatedAccess().getNotAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negated__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negated__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotAssignment_1()); }
(rule__Negated__NotAssignment_1)
{ after(grammarAccess.getNegatedAccess().getNotAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CExpression__Group_0__0__Impl
	rule__CExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getCExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CExpression__Group_0__1__Impl
	rule__CExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCExpressionAccess().getLExpressionParserRuleCall_0_1()); }
	ruleLExpression
{ after(grammarAccess.getCExpressionAccess().getLExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getCExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Compare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group__0__Impl
	rule__Compare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getSomeValueParserRuleCall_0()); }
	ruleSomeValue
{ after(grammarAccess.getCompareAccess().getSomeValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group__1__Impl
	rule__Compare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getAlternatives_1()); }
(rule__Compare__Alternatives_1)
{ after(grammarAccess.getCompareAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getRightAssignment_2()); }
(rule__Compare__RightAssignment_2)
{ after(grammarAccess.getCompareAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Compare__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_0__0__Impl
	rule__Compare__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getLessThanSignEqualsSignKeyword_1_0_1()); }

	'<=' 

{ after(grammarAccess.getCompareAccess().getLessThanSignEqualsSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_1__0__Impl
	rule__Compare__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getLessLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getLessLeftAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getLessThanSignKeyword_1_1_1()); }

	'<' 

{ after(grammarAccess.getCompareAccess().getLessThanSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_2__0__Impl
	rule__Compare__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getGreaterThanSignEqualsSignKeyword_1_2_1()); }

	'>=' 

{ after(grammarAccess.getCompareAccess().getGreaterThanSignEqualsSignKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_3__0__Impl
	rule__Compare__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getGreaterThanSignKeyword_1_3_1()); }

	'>' 

{ after(grammarAccess.getCompareAccess().getGreaterThanSignKeyword_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_4__0__Impl
	rule__Compare__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getEqualsSignKeyword_1_4_1()); }

	'=' 

{ after(grammarAccess.getCompareAccess().getEqualsSignKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_5__0__Impl
	rule__Compare__Group_1_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getExclamationMarkEqualsSignKeyword_1_5_1()); }

	'!=' 

{ after(grammarAccess.getCompareAccess().getExclamationMarkEqualsSignKeyword_1_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Compare__Group_1_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_6__0__Impl
	rule__Compare__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0()); }
(

)
{ after(grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compare__Group_1_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compare__Group_1_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__Group_1_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getTildeKeyword_1_6_1()); }

	'~' 

{ after(grammarAccess.getCompareAccess().getTildeKeyword_1_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); }
	rulePower
{ after(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__0__Impl
	rule__Multiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getPowerAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getGroup_1()); }
(rule__Power__Group_1__0)*
{ after(grammarAccess.getPowerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__0__Impl
	rule__Power__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getGroup_1_0()); }
(rule__Power__Group_1_0__0)
{ after(grammarAccess.getPowerAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightAssignment_1_1()); }
(rule__Power__RightAssignment_1_1)
{ after(grammarAccess.getPowerAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Power__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1_0__0__Impl
	rule__Power__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Power__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1()); }

	'^' 

{ after(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAExpressionParserRuleCall_0_1()); }
	ruleAExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getAExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NUMBER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group__0__Impl
	rule__NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getGroup_1()); }
(rule__NUMBER__Group_1__0)?
{ after(grammarAccess.getNUMBERAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NUMBER__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_1__0__Impl
	rule__NUMBER__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VARIABLE_VALUE__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VARIABLE_VALUE__Group_1__0__Impl
	rule__VARIABLE_VALUE__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLE_VALUE__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VARIABLE_VALUE__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VARIABLE_VALUE__Group_1__1__Impl
	rule__VARIABLE_VALUE__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLE_VALUE__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getVARIABLE_VALUEAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VARIABLE_VALUE__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VARIABLE_VALUE__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VARIABLE_VALUE__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_2()); }
	RULE_ID
{ after(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Equivalent__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalentAccess().getRightEquivalentParserRuleCall_1_2_0()); }
	ruleEquivalent{ after(grammarAccess.getEquivalentAccess().getRightEquivalentParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Implication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0()); }
	ruleImplication{ after(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disjunction__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_1_0()); }
	ruleDisjunction{ after(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
	ruleConjunction{ after(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negated__NotAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedAccess().getNotCExpressionParserRuleCall_1_0()); }
	ruleCExpression{ after(grammarAccess.getNegatedAccess().getNotCExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compare__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareAccess().getRightSomeValueParserRuleCall_2_0()); }
	ruleSomeValue{ after(grammarAccess.getCompareAccess().getRightSomeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); }
	rulePower{ after(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Power__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getPowerAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__NumValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberValueAccess().getNumValueNUMBERParserRuleCall_0()); }
	ruleNUMBER{ after(grammarAccess.getNumberValueAccess().getNumValueNUMBERParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__StrValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getStrValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getStrValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VarNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVarNameVARIABLE_VALUEParserRuleCall_0()); }
	ruleVARIABLE_VALUE{ after(grammarAccess.getVariableAccess().getVarNameVARIABLE_VALUEParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


