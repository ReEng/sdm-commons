/*
* generated by Xtext
*/
package org.storydriven.storydiagrams.expressions.common.parseTreeConstruction;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;
import org.storydriven.storydiagrams.expressions.common.services.ExpressionsGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ExpressionsParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ExpressionsGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LExpression_EquivalentParserRuleCall(this, this, 0, inst);
			case 1: return new Equivalent_Group(this, this, 1, inst);
			case 2: return new Implication_Group(this, this, 2, inst);
			case 3: return new Disjunction_Group(this, this, 3, inst);
			case 4: return new Conjunction_Group(this, this, 4, inst);
			case 5: return new Negation_Alternatives(this, this, 5, inst);
			case 6: return new Negated_Group(this, this, 6, inst);
			case 7: return new CExpression_Alternatives(this, this, 7, inst);
			case 8: return new Compare_Group(this, this, 8, inst);
			case 9: return new SomeValue_Alternatives(this, this, 9, inst);
			case 10: return new AExpression_AdditionParserRuleCall(this, this, 10, inst);
			case 11: return new Addition_Group(this, this, 11, inst);
			case 12: return new Multiplication_Group(this, this, 12, inst);
			case 13: return new Power_Group(this, this, 13, inst);
			case 14: return new PrimaryExpression_Alternatives(this, this, 14, inst);
			case 15: return new NumberValue_NumValueAssignment(this, this, 15, inst);
			case 16: return new BooleanValue_ValueAssignment(this, this, 16, inst);
			case 17: return new StringValue_StrValueAssignment(this, this, 17, inst);
			case 18: return new Variable_VarNameAssignment(this, this, 18, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule LExpression ****************
 *
 * // Boolean Logic Layer    ------------------------------------------------
 * 
 * LExpression:
 * 	Equivalent;
 *
 **/

// Equivalent
protected class LExpression_EquivalentParserRuleCall extends RuleCallToken {
	
	public LExpression_EquivalentParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLExpressionAccess().getEquivalentParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Equivalent_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule LExpression ****************/


/************ begin Rule Equivalent ****************
 *
 * Equivalent returns LExpression:
 * 	Implication ({Equivalent.left=current} "equiv" right=Equivalent)?;
 *
 **/

// Implication ({Equivalent.left=current} "equiv" right=Equivalent)?
protected class Equivalent_Group extends GroupToken {
	
	public Equivalent_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Equivalent_ImplicationParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Implication
protected class Equivalent_ImplicationParserRuleCall_0 extends RuleCallToken {
	
	public Equivalent_ImplicationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getImplicationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Implication_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Equivalent.left=current} "equiv" right=Equivalent)?
protected class Equivalent_Group_1 extends GroupToken {
	
	public Equivalent_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Equivalent.left=current}
protected class Equivalent_EquivalentLeftAction_1_0 extends ActionToken  {

	public Equivalent_EquivalentLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_ImplicationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "equiv"
protected class Equivalent_EquivKeyword_1_1 extends KeywordToken  {
	
	public Equivalent_EquivKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getEquivKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_EquivalentLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=Equivalent
protected class Equivalent_RightAssignment_1_2 extends AssignmentToken  {
	
	public Equivalent_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEquivalentAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Equivalent_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEquivalentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEquivalentAccess().getRightEquivalentParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Equivalent_EquivKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Equivalent ****************/


/************ begin Rule Implication ****************
 *
 * Implication returns LExpression:
 * 	Disjunction ({Imply.left=current} "imply" right=Implication)?;
 *
 **/

// Disjunction ({Imply.left=current} "imply" right=Implication)?
protected class Implication_Group extends GroupToken {
	
	public Implication_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImplicationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Implication_DisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Disjunction
protected class Implication_DisjunctionParserRuleCall_0 extends RuleCallToken {
	
	public Implication_DisjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Disjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Imply.left=current} "imply" right=Implication)?
protected class Implication_Group_1 extends GroupToken {
	
	public Implication_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImplicationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Imply.left=current}
protected class Implication_ImplyLeftAction_1_0 extends ActionToken  {

	public Implication_ImplyLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getImplicationAccess().getImplyLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_DisjunctionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "imply"
protected class Implication_ImplyKeyword_1_1 extends KeywordToken  {
	
	public Implication_ImplyKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImplicationAccess().getImplyKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_ImplyLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=Implication
protected class Implication_RightAssignment_1_2 extends AssignmentToken  {
	
	public Implication_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImplicationAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Implication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImplicationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Implication_ImplyKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Implication ****************/


/************ begin Rule Disjunction ****************
 *
 * Disjunction returns LExpression:
 * 	Conjunction (({Or.left=current} "or" | {Xor.left=current} "xor") right=Disjunction)?;
 *
 **/

// Conjunction (({Or.left=current} "or" | {Xor.left=current} "xor") right=Disjunction)?
protected class Disjunction_Group extends GroupToken {
	
	public Disjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Disjunction_ConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Conjunction
protected class Disjunction_ConjunctionParserRuleCall_0 extends RuleCallToken {
	
	public Disjunction_ConjunctionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Conjunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Or.left=current} "or" | {Xor.left=current} "xor") right=Disjunction)?
protected class Disjunction_Group_1 extends GroupToken {
	
	public Disjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Or.left=current} "or" | {Xor.left=current} "xor"
protected class Disjunction_Alternatives_1_0 extends AlternativesToken {

	public Disjunction_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Disjunction_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {Or.left=current} "or"
protected class Disjunction_Group_1_0_0 extends GroupToken {
	
	public Disjunction_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_OrKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Or.left=current}
protected class Disjunction_OrLeftAction_1_0_0_0 extends ActionToken  {

	public Disjunction_OrLeftAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_ConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "or"
protected class Disjunction_OrKeyword_1_0_0_1 extends KeywordToken  {
	
	public Disjunction_OrKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getOrKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_OrLeftAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Xor.left=current} "xor"
protected class Disjunction_Group_1_0_1 extends GroupToken {
	
	public Disjunction_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_XorKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Xor.left=current}
protected class Disjunction_XorLeftAction_1_0_1_0 extends ActionToken  {

	public Disjunction_XorLeftAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_ConjunctionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "xor"
protected class Disjunction_XorKeyword_1_0_1_1 extends KeywordToken  {
	
	public Disjunction_XorKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getXorKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_XorLeftAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=Disjunction
protected class Disjunction_RightAssignment_1_1 extends AssignmentToken  {
	
	public Disjunction_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDisjunctionAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Disjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDisjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Disjunction_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Disjunction ****************/


/************ begin Rule Conjunction ****************
 *
 * Conjunction returns LExpression:
 * 	Negation ({And.left=current} "and" right=Conjunction)?;
 *
 **/

// Negation ({And.left=current} "and" right=Conjunction)?
protected class Conjunction_Group extends GroupToken {
	
	public Conjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Conjunction_NegationParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Negation
protected class Conjunction_NegationParserRuleCall_0 extends RuleCallToken {
	
	public Conjunction_NegationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Negation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({And.left=current} "and" right=Conjunction)?
protected class Conjunction_Group_1 extends GroupToken {
	
	public Conjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {And.left=current}
protected class Conjunction_AndLeftAction_1_0 extends ActionToken  {

	public Conjunction_AndLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getAndLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_NegationParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "and"
protected class Conjunction_AndKeyword_1_1 extends KeywordToken  {
	
	public Conjunction_AndKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getAndKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_AndLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=Conjunction
protected class Conjunction_RightAssignment_1_2 extends AssignmentToken  {
	
	public Conjunction_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conjunction_AndKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Conjunction ****************/


/************ begin Rule Negation ****************
 *
 * Negation returns LExpression:
 * 	"not" Negated | CExpression;
 *
 **/

// "not" Negated | CExpression
protected class Negation_Alternatives extends AlternativesToken {

	public Negation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNegationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negation_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Negation_CExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "not" Negated
protected class Negation_Group_0 extends GroupToken {
	
	public Negation_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNegationAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negation_NegatedParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "not"
protected class Negation_NotKeyword_0_0 extends KeywordToken  {
	
	public Negation_NotKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNegationAccess().getNotKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Negated
protected class Negation_NegatedParserRuleCall_0_1 extends RuleCallToken {
	
	public Negation_NegatedParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negated_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Negated_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negation_NotKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// CExpression
protected class Negation_CExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Negation_CExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNegationAccess().getCExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(CExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Negation ****************/


/************ begin Rule Negated ****************
 *
 * Negated returns LExpression:
 * 	{Not} not=CExpression;
 *
 **/

// {Not} not=CExpression
protected class Negated_Group extends GroupToken {
	
	public Negated_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNegatedAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Negated_NotAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Not}
protected class Negated_NotAction_0 extends ActionToken  {

	public Negated_NotAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNegatedAccess().getNotAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// not=CExpression
protected class Negated_NotAssignment_1 extends AssignmentToken  {
	
	public Negated_NotAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNegatedAccess().getNotAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("not",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("not");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNegatedAccess().getNotCExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Negated_NotAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Negated ****************/


/************ begin Rule CExpression ****************
 *
 * // Compare Layer   ------------------------------------------------
 * 
 * CExpression returns LExpression:
 * 	"(" LExpression ")" | Compare | BooleanValue | Variable;
 *
 **/

// "(" LExpression ")" | Compare | BooleanValue | Variable
protected class CExpression_Alternatives extends AlternativesToken {

	public CExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CExpression_CompareParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CExpression_BooleanValueParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new CExpression_VariableParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" LExpression ")"
protected class CExpression_Group_0 extends GroupToken {
	
	public CExpression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class CExpression_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public CExpression_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// LExpression
protected class CExpression_LExpressionParserRuleCall_0_1 extends RuleCallToken {
	
	public CExpression_LExpressionParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getLExpressionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LExpression_EquivalentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(LExpression_EquivalentParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class CExpression_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public CExpression_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CExpression_LExpressionParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Compare
protected class CExpression_CompareParserRuleCall_1 extends RuleCallToken {
	
	public CExpression_CompareParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getCompareParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Compare_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanValue
protected class CExpression_BooleanValueParserRuleCall_2 extends RuleCallToken {
	
	public CExpression_BooleanValueParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getBooleanValueParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Variable
protected class CExpression_VariableParserRuleCall_3 extends RuleCallToken {
	
	public CExpression_VariableParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCExpressionAccess().getVariableParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_VarNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Variable_VarNameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CExpression ****************/


/************ begin Rule Compare ****************
 *
 * Compare returns CExpression:
 * 	SomeValue ({LessOrEqual.left=current} "<=" | {Less.left=current} "<" | {GreaterOrEqual.left=current} ">=" |
 * 	{Greater.left=current} ">" | {Equal.left=current} "=" | {Unequal.left=current} "!=" | {Approx.left=current} "~")
 * 	right=SomeValue;
 *
 **/

// SomeValue ({LessOrEqual.left=current} "<=" | {Less.left=current} "<" | {GreaterOrEqual.left=current} ">=" |
// {Greater.left=current} ">" | {Equal.left=current} "=" | {Unequal.left=current} "!=" | {Approx.left=current} "~")
// right=SomeValue
protected class Compare_Group extends GroupToken {
	
	public Compare_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_RightAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SomeValue
protected class Compare_SomeValueParserRuleCall_0 extends RuleCallToken {
	
	public Compare_SomeValueParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompareAccess().getSomeValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SomeValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SomeValue_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// {LessOrEqual.left=current} "<=" | {Less.left=current} "<" | {GreaterOrEqual.left=current} ">=" | {Greater.left=current}
// ">" | {Equal.left=current} "=" | {Unequal.left=current} "!=" | {Approx.left=current} "~"
protected class Compare_Alternatives_1 extends AlternativesToken {

	public Compare_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompareAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Compare_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Compare_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Compare_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Compare_Group_1_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Compare_Group_1_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Compare_Group_1_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

}

// {LessOrEqual.left=current} "<="
protected class Compare_Group_1_0 extends GroupToken {
	
	public Compare_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_LessThanSignEqualsSignKeyword_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LessOrEqual.left=current}
protected class Compare_LessOrEqualLeftAction_1_0_0 extends ActionToken  {

	public Compare_LessOrEqualLeftAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<="
protected class Compare_LessThanSignEqualsSignKeyword_1_0_1 extends KeywordToken  {
	
	public Compare_LessThanSignEqualsSignKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getLessThanSignEqualsSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_LessOrEqualLeftAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Less.left=current} "<"
protected class Compare_Group_1_1 extends GroupToken {
	
	public Compare_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_LessThanSignKeyword_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Less.left=current}
protected class Compare_LessLeftAction_1_1_0 extends ActionToken  {

	public Compare_LessLeftAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getLessLeftAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<"
protected class Compare_LessThanSignKeyword_1_1_1 extends KeywordToken  {
	
	public Compare_LessThanSignKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getLessThanSignKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_LessLeftAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {GreaterOrEqual.left=current} ">="
protected class Compare_Group_1_2 extends GroupToken {
	
	public Compare_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_GreaterThanSignEqualsSignKeyword_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {GreaterOrEqual.left=current}
protected class Compare_GreaterOrEqualLeftAction_1_2_0 extends ActionToken  {

	public Compare_GreaterOrEqualLeftAction_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">="
protected class Compare_GreaterThanSignEqualsSignKeyword_1_2_1 extends KeywordToken  {
	
	public Compare_GreaterThanSignEqualsSignKeyword_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getGreaterThanSignEqualsSignKeyword_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_GreaterOrEqualLeftAction_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Greater.left=current} ">"
protected class Compare_Group_1_3 extends GroupToken {
	
	public Compare_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_GreaterThanSignKeyword_1_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Greater.left=current}
protected class Compare_GreaterLeftAction_1_3_0 extends ActionToken  {

	public Compare_GreaterLeftAction_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">"
protected class Compare_GreaterThanSignKeyword_1_3_1 extends KeywordToken  {
	
	public Compare_GreaterThanSignKeyword_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getGreaterThanSignKeyword_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_GreaterLeftAction_1_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Equal.left=current} "="
protected class Compare_Group_1_4 extends GroupToken {
	
	public Compare_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_EqualsSignKeyword_1_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Equal.left=current}
protected class Compare_EqualLeftAction_1_4_0 extends ActionToken  {

	public Compare_EqualLeftAction_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "="
protected class Compare_EqualsSignKeyword_1_4_1 extends KeywordToken  {
	
	public Compare_EqualsSignKeyword_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getEqualsSignKeyword_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_EqualLeftAction_1_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Unequal.left=current} "!="
protected class Compare_Group_1_5 extends GroupToken {
	
	public Compare_Group_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_ExclamationMarkEqualsSignKeyword_1_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Unequal.left=current}
protected class Compare_UnequalLeftAction_1_5_0 extends ActionToken  {

	public Compare_UnequalLeftAction_1_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "!="
protected class Compare_ExclamationMarkEqualsSignKeyword_1_5_1 extends KeywordToken  {
	
	public Compare_ExclamationMarkEqualsSignKeyword_1_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getExclamationMarkEqualsSignKeyword_1_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_UnequalLeftAction_1_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Approx.left=current} "~"
protected class Compare_Group_1_6 extends GroupToken {
	
	public Compare_Group_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompareAccess().getGroup_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_TildeKeyword_1_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Approx.left=current}
protected class Compare_ApproxLeftAction_1_6_0 extends ActionToken  {

	public Compare_ApproxLeftAction_1_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_SomeValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "~"
protected class Compare_TildeKeyword_1_6_1 extends KeywordToken  {
	
	public Compare_TildeKeyword_1_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompareAccess().getTildeKeyword_1_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Compare_ApproxLeftAction_1_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=SomeValue
protected class Compare_RightAssignment_2 extends AssignmentToken  {
	
	public Compare_RightAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompareAccess().getRightAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SomeValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSomeValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompareAccess().getRightSomeValueParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Compare_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Compare ****************/


/************ begin Rule SomeValue ****************
 *
 * SomeValue:
 * 	StringValue | BooleanValue | AExpression;
 *
 **/

// StringValue | BooleanValue | AExpression
protected class SomeValue_Alternatives extends AlternativesToken {

	public SomeValue_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSomeValueAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SomeValue_StringValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SomeValue_BooleanValueParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SomeValue_AExpressionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StringValue
protected class SomeValue_StringValueParserRuleCall_0 extends RuleCallToken {
	
	public SomeValue_StringValueParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSomeValueAccess().getStringValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringValue_StrValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringValue_StrValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanValue
protected class SomeValue_BooleanValueParserRuleCall_1 extends RuleCallToken {
	
	public SomeValue_BooleanValueParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSomeValueAccess().getBooleanValueParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AExpression
protected class SomeValue_AExpressionParserRuleCall_2 extends RuleCallToken {
	
	public SomeValue_AExpressionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSomeValueAccess().getAExpressionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AExpression_AdditionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AExpression_AdditionParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SomeValue ****************/


/************ begin Rule AExpression ****************
 *
 * // Arithmetic Layer   ------------------------------------------------
 * 
 * AExpression:
 * 	Addition;
 *
 **/

// Addition
protected class AExpression_AdditionParserRuleCall extends RuleCallToken {
	
	public AExpression_AdditionParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAExpressionAccess().getAdditionParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Addition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule AExpression ****************/


/************ begin Rule Addition ****************
 *
 * Addition returns AExpression:
 * 	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
 *
 **/

// Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
protected class Addition_Group extends GroupToken {
	
	public Addition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_MultiplicationParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Multiplication
protected class Addition_MultiplicationParserRuleCall_0 extends RuleCallToken {
	
	public Addition_MultiplicationParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Multiplication_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
protected class Addition_Group_1 extends GroupToken {
	
	public Addition_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Plus.left=current} "+" | {Minus.left=current} "-"
protected class Addition_Alternatives_1_0 extends AlternativesToken {

	public Addition_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAdditionAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {Plus.left=current} "+"
protected class Addition_Group_1_0_0 extends GroupToken {
	
	public Addition_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_PlusSignKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Plus.left=current}
protected class Addition_PlusLeftAction_1_0_0_0 extends ActionToken  {

	public Addition_PlusLeftAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_MultiplicationParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "+"
protected class Addition_PlusSignKeyword_1_0_0_1 extends KeywordToken  {
	
	public Addition_PlusSignKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_PlusLeftAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Minus.left=current} "-"
protected class Addition_Group_1_0_1 extends GroupToken {
	
	public Addition_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_HyphenMinusKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Minus.left=current}
protected class Addition_MinusLeftAction_1_0_1_0 extends ActionToken  {

	public Addition_MinusLeftAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_MultiplicationParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "-"
protected class Addition_HyphenMinusKeyword_1_0_1_1 extends KeywordToken  {
	
	public Addition_HyphenMinusKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_MinusLeftAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=Multiplication
protected class Addition_RightAssignment_1_1 extends AssignmentToken  {
	
	public Addition_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditionAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Addition_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Addition ****************/


/************ begin Rule Multiplication ****************
 *
 * Multiplication returns AExpression:
 * 	Power (({Multi.left=current} "*" | {Div.left=current} "/" | {Mod.left=current} "%") right=Power)*;
 *
 **/

// Power (({Multi.left=current} "*" | {Div.left=current} "/" | {Mod.left=current} "%") right=Power)*
protected class Multiplication_Group extends GroupToken {
	
	public Multiplication_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_PowerParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Power
protected class Multiplication_PowerParserRuleCall_0 extends RuleCallToken {
	
	public Multiplication_PowerParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Power_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Multi.left=current} "*" | {Div.left=current} "/" | {Mod.left=current} "%") right=Power)*
protected class Multiplication_Group_1 extends GroupToken {
	
	public Multiplication_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Multi.left=current} "*" | {Div.left=current} "/" | {Mod.left=current} "%"
protected class Multiplication_Alternatives_1_0 extends AlternativesToken {

	public Multiplication_Alternatives_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getAlternatives_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_Group_1_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Multiplication_Group_1_0_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// {Multi.left=current} "*"
protected class Multiplication_Group_1_0_0 extends GroupToken {
	
	public Multiplication_Group_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_AsteriskKeyword_1_0_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Multi.left=current}
protected class Multiplication_MultiLeftAction_1_0_0_0 extends ActionToken  {

	public Multiplication_MultiLeftAction_1_0_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_PowerParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "*"
protected class Multiplication_AsteriskKeyword_1_0_0_1 extends KeywordToken  {
	
	public Multiplication_AsteriskKeyword_1_0_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_MultiLeftAction_1_0_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Div.left=current} "/"
protected class Multiplication_Group_1_0_1 extends GroupToken {
	
	public Multiplication_Group_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_SolidusKeyword_1_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Div.left=current}
protected class Multiplication_DivLeftAction_1_0_1_0 extends ActionToken  {

	public Multiplication_DivLeftAction_1_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_PowerParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "/"
protected class Multiplication_SolidusKeyword_1_0_1_1 extends KeywordToken  {
	
	public Multiplication_SolidusKeyword_1_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_DivLeftAction_1_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {Mod.left=current} "%"
protected class Multiplication_Group_1_0_2 extends GroupToken {
	
	public Multiplication_Group_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_PercentSignKeyword_1_0_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Mod.left=current}
protected class Multiplication_ModLeftAction_1_0_2_0 extends ActionToken  {

	public Multiplication_ModLeftAction_1_0_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_PowerParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "%"
protected class Multiplication_PercentSignKeyword_1_0_2_1 extends KeywordToken  {
	
	public Multiplication_PercentSignKeyword_1_0_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_ModLeftAction_1_0_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



// right=Power
protected class Multiplication_RightAssignment_1_1 extends AssignmentToken  {
	
	public Multiplication_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPowerRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Multiplication_Alternatives_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Multiplication ****************/


/************ begin Rule Power ****************
 *
 * Power returns AExpression:
 * 	PrimaryExpression (({Pow.left=current} "^") right=PrimaryExpression)*;
 *
 **/

// PrimaryExpression (({Pow.left=current} "^") right=PrimaryExpression)*
protected class Power_Group extends GroupToken {
	
	public Power_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPowerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Power_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PrimaryExpression
protected class Power_PrimaryExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Power_PrimaryExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPowerAccess().getPrimaryExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PrimaryExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// (({Pow.left=current} "^") right=PrimaryExpression)*
protected class Power_Group_1 extends GroupToken {
	
	public Power_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPowerAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_RightAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Pow.left=current} "^"
protected class Power_Group_1_0 extends GroupToken {
	
	public Power_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPowerAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_CircumflexAccentKeyword_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {Pow.left=current}
protected class Power_PowLeftAction_1_0_0 extends ActionToken  {

	public Power_PowLeftAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPowerAccess().getPowLeftAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Power_PrimaryExpressionParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "^"
protected class Power_CircumflexAccentKeyword_1_0_1 extends KeywordToken  {
	
	public Power_CircumflexAccentKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Power_PowLeftAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// right=PrimaryExpression
protected class Power_RightAssignment_1_1 extends AssignmentToken  {
	
	public Power_RightAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPowerAccess().getRightAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimaryExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPowerAccess().getRightPrimaryExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Power_Group_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Power ****************/


/************ begin Rule PrimaryExpression ****************
 *
 * PrimaryExpression returns AExpression:
 * 	"(" AExpression ")" | NumberValue | Variable;
 *
 **/

// "(" AExpression ")" | NumberValue | Variable
protected class PrimaryExpression_Alternatives extends AlternativesToken {

	public PrimaryExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PrimaryExpression_NumberValueParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PrimaryExpression_VariableParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" AExpression ")"
protected class PrimaryExpression_Group_0 extends GroupToken {
	
	public PrimaryExpression_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class PrimaryExpression_LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public PrimaryExpression_LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// AExpression
protected class PrimaryExpression_AExpressionParserRuleCall_0_1 extends RuleCallToken {
	
	public PrimaryExpression_AExpressionParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getAExpressionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AExpression_AdditionParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AExpression_AdditionParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class PrimaryExpression_RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public PrimaryExpression_RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PrimaryExpression_AExpressionParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// NumberValue
protected class PrimaryExpression_NumberValueParserRuleCall_1 extends RuleCallToken {
	
	public PrimaryExpression_NumberValueParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getNumberValueParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberValue_NumValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NumberValue_NumValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Variable
protected class PrimaryExpression_VariableParserRuleCall_2 extends RuleCallToken {
	
	public PrimaryExpression_VariableParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimaryExpressionAccess().getVariableParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_VarNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Variable_VarNameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PrimaryExpression ****************/


/************ begin Rule NumberValue ****************
 *
 * NumberValue:
 * 	numValue=NUMBER;
 *
 **/

// numValue=NUMBER
protected class NumberValue_NumValueAssignment extends AssignmentToken  {
	
	public NumberValue_NumValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumberValueAccess().getNumValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("numValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("numValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumberValueAccess().getNumValueNUMBERParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNumberValueAccess().getNumValueNUMBERParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule NumberValue ****************/



/************ begin Rule BooleanValue ****************
 *
 * BooleanValue:
 * 	value=BOOLEAN;
 *
 **/

// value=BOOLEAN
protected class BooleanValue_ValueAssignment extends AssignmentToken  {
	
	public BooleanValue_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanValueAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule BooleanValue ****************/


/************ begin Rule StringValue ****************
 *
 * StringValue:
 * 	strValue=STRING;
 *
 **/

// strValue=STRING
protected class StringValue_StrValueAssignment extends AssignmentToken  {
	
	public StringValue_StrValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringValueAccess().getStrValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("strValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringValueAccess().getStrValueSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringValueAccess().getStrValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringValue ****************/


/************ begin Rule Variable ****************
 *
 * Variable:
 * 	varName=VARIABLE_VALUE;
 *
 **/

// varName=VARIABLE_VALUE
protected class Variable_VarNameAssignment extends AssignmentToken  {
	
	public Variable_VarNameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getVarNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("varName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("varName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableAccess().getVarNameVARIABLE_VALUEParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getVariableAccess().getVarNameVARIABLE_VALUEParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Variable ****************/


}
