/*
* generated by Xtext
*/
grammar InternalPathExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.storydriven.modeling.expressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.storydriven.modeling.expressions.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.storydriven.modeling.expressions.services.PathExpressionsGrammarAccess;

}

@parser::members {

 	private PathExpressionsGrammarAccess grammarAccess;
 	
    public InternalPathExpressionsParser(TokenStream input, IAstFactory factory, PathExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/storydriven/modeling/expressions/parser/antlr/internal/InternalPathExpressions.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PathExpression";	
   	}
   	
   	@Override
   	protected PathExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePathExpression
entryRulePathExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathExpressionRule(), currentNode); }
	 iv_rulePathExpression=rulePathExpression 
	 { $current=$iv_rulePathExpression.current; } 
	 EOF 
;

// Rule PathExpression
rulePathExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_0_0(), currentNode); 
	    }
		lv_pathAlternatives_0_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pathAlternatives",
	        		lv_pathAlternatives_0_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPathExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_pathAlternatives_2_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pathAlternatives",
	        		lv_pathAlternatives_2_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPathExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
(	'|' 
    {
        createLeafNode(grammarAccess.getPathExpressionAccess().getVerticalLineKeyword_1_3_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPathExpressionAccess().getLeftParenthesisKeyword_1_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathExpressionAccess().getPathAlternativesPathParserRuleCall_1_3_2_0(), currentNode); 
	    }
		lv_pathAlternatives_6_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pathAlternatives",
	        		lv_pathAlternatives_6_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPathExpressionAccess().getRightParenthesisKeyword_1_3_3(), null); 
    }
)+))
;





// Entry rule entryRulePath
entryRulePath returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); }
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current; } 
	 EOF 
;

// Rule Path
rulePath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathAccess().getSegmentsPathSegmentParserRuleCall_0_0(), currentNode); 
	    }
		lv_segments_0_0=rulePathSegment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"segments",
	        		lv_segments_0_0, 
	        		"PathSegment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getPathAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathAccess().getSegmentsPathSegmentParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_segments_2_0=rulePathSegment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"segments",
	        		lv_segments_2_0, 
	        		"PathSegment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePathSegment
entryRulePathSegment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathSegmentRule(), currentNode); }
	 iv_rulePathSegment=rulePathSegment 
	 { $current=$iv_rulePathSegment.current; } 
	 EOF 
;

// Rule PathSegment
rulePathSegment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_alternatives_0_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_0_0, 
	        		"PathSegmentDescription", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPathSegmentAccess().getLeftParenthesisKeyword_0_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_alternatives_2_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_2_0, 
	        		"PathSegmentDescription", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'|' 
    {
        createLeafNode(grammarAccess.getPathSegmentAccess().getVerticalLineKeyword_0_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathSegmentAccess().getAlternativesPathSegmentDescriptionParserRuleCall_0_1_2_1_0(), currentNode); 
	    }
		lv_alternatives_4_0=rulePathSegmentDescription		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"alternatives",
	        		lv_alternatives_4_0, 
	        		"PathSegmentDescription", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+	')' 
    {
        createLeafNode(grammarAccess.getPathSegmentAccess().getRightParenthesisKeyword_0_1_3(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathSegmentAccess().getRepeatOperatorRepeatOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_repeatOperator_6_0=ruleRepeatOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathSegmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"repeatOperator",
	        		lv_repeatOperator_6_0, 
	        		"RepeatOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulePathSegmentDescription
entryRulePathSegmentDescription returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathSegmentDescriptionRule(), currentNode); }
	 iv_rulePathSegmentDescription=rulePathSegmentDescription 
	 { $current=$iv_rulePathSegmentDescription.current; } 
	 EOF 
;

// Rule PathSegmentDescription
rulePathSegmentDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getImplicitPathDescriptionParserRuleCall_0_0(), currentNode); 
    }
    this_ImplicitPathDescription_0=ruleImplicitPathDescription
    { 
        $current = $this_ImplicitPathDescription_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getExplicitPathDescriptionParserRuleCall_0_1(), currentNode); 
    }
    this_ExplicitPathDescription_1=ruleExplicitPathDescription
    { 
        $current = $this_ExplicitPathDescription_1.current; 
        currentNode = currentNode.getParent();
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathSegmentDescriptionAccess().getRestrictionListRestrictionListParserRuleCall_1_0(), currentNode); 
	    }
		lv_restrictionList_2_0=ruleRestrictionList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathSegmentDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"restrictionList",
	        		lv_restrictionList_2_0, 
	        		"RestrictionList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleRestrictionList
entryRuleRestrictionList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictionListRule(), currentNode); }
	 iv_ruleRestrictionList=ruleRestrictionList 
	 { $current=$iv_ruleRestrictionList.current; } 
	 EOF 
;

// Rule RestrictionList
ruleRestrictionList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getRestrictionListAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionListAccess().getRestrictionsTypeRestrictionParserRuleCall_1_0(), currentNode); 
	    }
		lv_restrictions_1_0=ruleTypeRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"restrictions",
	        		lv_restrictions_1_0, 
	        		"TypeRestriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getRestrictionListAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionListAccess().getRestrictionsTypeRestrictionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_restrictions_3_0=ruleTypeRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"restrictions",
	        		lv_restrictions_3_0, 
	        		"TypeRestriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getRestrictionListAccess().getRightSquareBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleImplicitPathDescription
entryRuleImplicitPathDescription returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImplicitPathDescriptionRule(), currentNode); }
	 iv_ruleImplicitPathDescription=ruleImplicitPathDescription 
	 { $current=$iv_ruleImplicitPathDescription.current; } 
	 EOF 
;

// Rule ImplicitPathDescription
ruleImplicitPathDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImplicitPathDescriptionAccess().getKindImplicitPathKindEnumRuleCall_0(), currentNode); 
	    }
		lv_kind_0_0=ruleImplicitPathKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImplicitPathDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_0_0, 
	        		"ImplicitPathKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleExplicitPathDescription
entryRuleExplicitPathDescription returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExplicitPathDescriptionRule(), currentNode); }
	 iv_ruleExplicitPathDescription=ruleExplicitPathDescription 
	 { $current=$iv_ruleExplicitPathDescription.current; } 
	 EOF 
;

// Rule ExplicitPathDescription
ruleExplicitPathDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_associationName_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExplicitPathDescriptionAccess().getAssociationNameIDTerminalRuleCall_0(), "associationName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExplicitPathDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"associationName",
	        		lv_associationName_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleTypeRestriction
entryRuleTypeRestriction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRestrictionRule(), currentNode); }
	 iv_ruleTypeRestriction=ruleTypeRestriction 
	 { $current=$iv_ruleTypeRestriction.current; } 
	 EOF 
;

// Rule TypeRestriction
ruleTypeRestriction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_forbidden_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getTypeRestrictionAccess().getForbiddenExclamationMarkKeyword_0_0(), "forbidden"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRestrictionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "forbidden", true, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_typeName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTypeRestrictionAccess().getTypeNameIDTerminalRuleCall_1_0(), "typeName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRestrictionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeName",
	        		lv_typeName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Rule RepeatOperator
ruleRepeatOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'NO_REPEAT' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getNO_REPEATEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRepeatOperatorAccess().getNO_REPEATEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getAT_LEAST_ONCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRepeatOperatorAccess().getAT_LEAST_ONCEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'*' 
	{
        $current = grammarAccess.getRepeatOperatorAccess().getARBITRARYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getRepeatOperatorAccess().getARBITRARYEnumLiteralDeclaration_2(), null); 
    }
));



// Rule ImplicitPathKind
ruleImplicitPathKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'-->' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getImplicitPathKindAccess().getANYEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'<>-->' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_SOURCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_SOURCEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'--><>' 
	{
        $current = grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_TARGETEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getImplicitPathKindAccess().getCONTAINMENT_TARGETEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


