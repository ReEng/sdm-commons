/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.storydriven.modeling.expressions.common.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.storydriven.modeling.expressions.common.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.storydriven.modeling.expressions.common.services.ExpressionsGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public InternalExpressionsParser(TokenStream input, IAstFactory factory, ExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/storydriven/modeling/expressions/common/parser/antlr/internal/InternalExpressions.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LExpression";	
   	}
   	
   	@Override
   	protected ExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLExpression
entryRuleLExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLExpressionRule(), currentNode); }
	 iv_ruleLExpression=ruleLExpression 
	 { $current=$iv_ruleLExpression.current; } 
	 EOF 
;

// Rule LExpression
ruleLExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLExpressionAccess().getEquivalentParserRuleCall(), currentNode); 
    }
    this_Equivalent_0=ruleEquivalent
    { 
        $current = $this_Equivalent_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleEquivalent
entryRuleEquivalent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEquivalentRule(), currentNode); }
	 iv_ruleEquivalent=ruleEquivalent 
	 { $current=$iv_ruleEquivalent.current; } 
	 EOF 
;

// Rule Equivalent
ruleEquivalent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEquivalentAccess().getImplicationParserRuleCall_0(), currentNode); 
    }
    this_Implication_0=ruleImplication
    { 
        $current = $this_Implication_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEquivalentAccess().getEquivalentLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'equiv' 
    {
        createLeafNode(grammarAccess.getEquivalentAccess().getEquivKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEquivalentAccess().getRightEquivalentParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleEquivalent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEquivalentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Equivalent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleImplication
entryRuleImplication returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImplicationRule(), currentNode); }
	 iv_ruleImplication=ruleImplication 
	 { $current=$iv_ruleImplication.current; } 
	 EOF 
;

// Rule Implication
ruleImplication returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImplicationAccess().getDisjunctionParserRuleCall_0(), currentNode); 
    }
    this_Disjunction_0=ruleDisjunction
    { 
        $current = $this_Disjunction_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getImplicationAccess().getImplyLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getImplicationAccess().getImplyLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'imply' 
    {
        createLeafNode(grammarAccess.getImplicationAccess().getImplyKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImplicationAccess().getRightImplicationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleImplication		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Implication", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDisjunctionRule(), currentNode); }
	 iv_ruleDisjunction=ruleDisjunction 
	 { $current=$iv_ruleDisjunction.current; } 
	 EOF 
;

// Rule Disjunction
ruleDisjunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDisjunctionAccess().getConjunctionParserRuleCall_0(), currentNode); 
    }
    this_Conjunction_0=ruleConjunction
    { 
        $current = $this_Conjunction_0.current; 
        currentNode = currentNode.getParent();
    }
((((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDisjunctionAccess().getOrLeftAction_1_0_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'or' 
    {
        createLeafNode(grammarAccess.getDisjunctionAccess().getOrKeyword_1_0_0_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDisjunctionAccess().getXorLeftAction_1_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'xor' 
    {
        createLeafNode(grammarAccess.getDisjunctionAccess().getXorKeyword_1_0_1_1(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDisjunctionAccess().getRightDisjunctionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_5_0=ruleDisjunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDisjunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_5_0, 
	        		"Disjunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConjunctionRule(), currentNode); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getConjunctionAccess().getNegationParserRuleCall_0(), currentNode); 
    }
    this_Negation_0=ruleNegation
    { 
        $current = $this_Negation_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConjunctionAccess().getAndLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConjunctionAccess().getAndLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'and' 
    {
        createLeafNode(grammarAccess.getConjunctionAccess().getAndKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConjunctionAccess().getRightConjunctionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConjunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Conjunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNegationRule(), currentNode); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'not' 
    {
        createLeafNode(grammarAccess.getNegationAccess().getNotKeyword_0_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNegationAccess().getNegatedParserRuleCall_0_1(), currentNode); 
    }
    this_Negated_1=ruleNegated
    { 
        $current = $this_Negated_1.current; 
        currentNode = currentNode.getParent();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNegationAccess().getCExpressionParserRuleCall_1(), currentNode); 
    }
    this_CExpression_2=ruleCExpression
    { 
        $current = $this_CExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNegated
entryRuleNegated returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNegatedRule(), currentNode); }
	 iv_ruleNegated=ruleNegated 
	 { $current=$iv_ruleNegated.current; } 
	 EOF 
;

// Rule Negated
ruleNegated returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNegatedAccess().getNotAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNegatedAccess().getNotAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNegatedAccess().getNotCExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_not_1_0=ruleCExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNegatedRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"not",
	        		lv_not_1_0, 
	        		"CExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCExpression
entryRuleCExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCExpressionRule(), currentNode); }
	 iv_ruleCExpression=ruleCExpression 
	 { $current=$iv_ruleCExpression.current; } 
	 EOF 
;

// Rule CExpression
ruleCExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'(' 
    {
        createLeafNode(grammarAccess.getCExpressionAccess().getLeftParenthesisKeyword_0_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCExpressionAccess().getLExpressionParserRuleCall_0_1(), currentNode); 
    }
    this_LExpression_1=ruleLExpression
    { 
        $current = $this_LExpression_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getCExpressionAccess().getRightParenthesisKeyword_0_2(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCExpressionAccess().getCompareParserRuleCall_1(), currentNode); 
    }
    this_Compare_3=ruleCompare
    { 
        $current = $this_Compare_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCExpressionAccess().getBooleanValueParserRuleCall_2(), currentNode); 
    }
    this_BooleanValue_4=ruleBooleanValue
    { 
        $current = $this_BooleanValue_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCExpressionAccess().getVariableParserRuleCall_3(), currentNode); 
    }
    this_Variable_5=ruleVariable
    { 
        $current = $this_Variable_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompareRule(), currentNode); }
	 iv_ruleCompare=ruleCompare 
	 { $current=$iv_ruleCompare.current; } 
	 EOF 
;

// Rule Compare
ruleCompare returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getCompareAccess().getSomeValueParserRuleCall_0(), currentNode); 
    }
    this_SomeValue_0=ruleSomeValue
    { 
        $current = $this_SomeValue_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getLessOrEqualLeftAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'<=' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getLessThanSignEqualsSignKeyword_1_0_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getLessLeftAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getLessLeftAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'<' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getLessThanSignKeyword_1_1_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getGreaterOrEqualLeftAction_1_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'>=' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getGreaterThanSignEqualsSignKeyword_1_2_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getGreaterLeftAction_1_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'>' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getGreaterThanSignKeyword_1_3_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getEqualLeftAction_1_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'=' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getEqualsSignKeyword_1_4_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getUnequalLeftAction_1_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'!=' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getExclamationMarkEqualsSignKeyword_1_5_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompareAccess().getApproxLeftAction_1_6_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'~' 
    {
        createLeafNode(grammarAccess.getCompareAccess().getTildeKeyword_1_6_1(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompareAccess().getRightSomeValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_right_15_0=ruleSomeValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompareRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_15_0, 
	        		"SomeValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSomeValue
entryRuleSomeValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSomeValueRule(), currentNode); }
	 iv_ruleSomeValue=ruleSomeValue 
	 { $current=$iv_ruleSomeValue.current; } 
	 EOF 
;

// Rule SomeValue
ruleSomeValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSomeValueAccess().getStringValueParserRuleCall_0(), currentNode); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSomeValueAccess().getBooleanValueParserRuleCall_1(), currentNode); 
    }
    this_BooleanValue_1=ruleBooleanValue
    { 
        $current = $this_BooleanValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getSomeValueAccess().getAExpressionParserRuleCall_2(), currentNode); 
    }
    this_AExpression_2=ruleAExpression
    { 
        $current = $this_AExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAExpression
entryRuleAExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAExpressionRule(), currentNode); }
	 iv_ruleAExpression=ruleAExpression 
	 { $current=$iv_ruleAExpression.current; } 
	 EOF 
;

// Rule AExpression
ruleAExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAExpressionAccess().getAdditionParserRuleCall(), currentNode); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditionRule(), currentNode); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0(), currentNode); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        currentNode = currentNode.getParent();
    }
((((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'+' 
    {
        createLeafNode(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'-' 
    {
        createLeafNode(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_5_0, 
	        		"Multiplication", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicationRule(), currentNode); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getPowerParserRuleCall_0(), currentNode); 
    }
    this_Power_0=rulePower
    { 
        $current = $this_Power_0.current; 
        currentNode = currentNode.getParent();
    }
((((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicationAccess().getModLeftAction_1_0_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'%' 
    {
        createLeafNode(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1(), null); 
    }
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getRightPowerParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_7_0=rulePower		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_7_0, 
	        		"Power", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPowerRule(), currentNode); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPowerAccess().getPrimaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPowerAccess().getPowLeftAction_1_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'^' 
    {
        createLeafNode(grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPowerAccess().getRightPrimaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPowerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'[' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftSquareBracketKeyword_0_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAExpressionParserRuleCall_0_1(), currentNode); 
    }
    this_AExpression_1=ruleAExpression
    { 
        $current = $this_AExpression_1.current; 
        currentNode = currentNode.getParent();
    }
	']' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_0_2(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNumberValueParserRuleCall_1(), currentNode); 
    }
    this_NumberValue_3=ruleNumberValue
    { 
        $current = $this_NumberValue_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableParserRuleCall_2(), currentNode); 
    }
    this_Variable_4=ruleVariable
    { 
        $current = $this_Variable_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberValueRule(), currentNode); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumberValueAccess().getNumValueNUMBERParserRuleCall_0(), currentNode); 
	    }
		lv_numValue_0_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"numValue",
	        		lv_numValue_0_0, 
	        		"NUMBER", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBERRule(), currentNode); } 
	 iv_ruleNUMBER=ruleNUMBER 
	 { $current=$iv_ruleNUMBER.current.getText(); }  
	 EOF 
;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanValueRule(), currentNode); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"BOOLEAN", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringValueRule(), currentNode); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_strValue_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringValueAccess().getStrValueSTRINGTerminalRuleCall_0(), "strValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"strValue",
	        		lv_strValue_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableAccess().getVarNameVARIABLE_VALUEParserRuleCall_0(), currentNode); 
	    }
		lv_varName_0_0=ruleVARIABLE_VALUE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varName",
	        		lv_varName_0_0, 
	        		"VARIABLE_VALUE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleVARIABLE_VALUE
entryRuleVARIABLE_VALUE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVARIABLE_VALUERule(), currentNode); } 
	 iv_ruleVARIABLE_VALUE=ruleVARIABLE_VALUE 
	 { $current=$iv_ruleVARIABLE_VALUE.current.getText(); }  
	 EOF 
;

// Rule VARIABLE_VALUE
ruleVARIABLE_VALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_0(), null); 
    }

    |(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVARIABLE_VALUEAccess().getFullStopKeyword_1_1(), null); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getVARIABLE_VALUEAccess().getIDTerminalRuleCall_1_2(), null); 
    }
))
    ;





RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


