/*
* generated by Xtext
*/
package org.storydriven.storydiagrams.expressions.ui.contentassist.antlr;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.storydriven.storydiagrams.expressions.services.PathExpressionsGrammarAccess;

import com.google.inject.Inject;

public class PathExpressionsParser extends AbstractContentAssistParser {
	
	@Inject
	private PathExpressionsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.storydriven.storydiagrams.expressions.ui.contentassist.antlr.internal.InternalPathExpressionsParser createParser() {
		org.storydriven.storydiagrams.expressions.ui.contentassist.antlr.internal.InternalPathExpressionsParser result = new org.storydriven.storydiagrams.expressions.ui.contentassist.antlr.internal.InternalPathExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPathExpressionAccess().getAlternatives(), "rule__PathExpression__Alternatives");
					put(grammarAccess.getPathSegmentAccess().getAlternatives_0(), "rule__PathSegment__Alternatives_0");
					put(grammarAccess.getPathSegmentDescriptionAccess().getAlternatives_0(), "rule__PathSegmentDescription__Alternatives_0");
					put(grammarAccess.getRepeatOperatorAccess().getAlternatives(), "rule__RepeatOperator__Alternatives");
					put(grammarAccess.getImplicitPathKindAccess().getAlternatives(), "rule__ImplicitPathKind__Alternatives");
					put(grammarAccess.getPathExpressionAccess().getGroup_1(), "rule__PathExpression__Group_1__0");
					put(grammarAccess.getPathExpressionAccess().getGroup_1_3(), "rule__PathExpression__Group_1_3__0");
					put(grammarAccess.getPathAccess().getGroup(), "rule__Path__Group__0");
					put(grammarAccess.getPathAccess().getGroup_1(), "rule__Path__Group_1__0");
					put(grammarAccess.getPathSegmentAccess().getGroup(), "rule__PathSegment__Group__0");
					put(grammarAccess.getPathSegmentAccess().getGroup_0_1(), "rule__PathSegment__Group_0_1__0");
					put(grammarAccess.getPathSegmentAccess().getGroup_0_1_2(), "rule__PathSegment__Group_0_1_2__0");
					put(grammarAccess.getPathSegmentDescriptionAccess().getGroup(), "rule__PathSegmentDescription__Group__0");
					put(grammarAccess.getRestrictionListAccess().getGroup(), "rule__RestrictionList__Group__0");
					put(grammarAccess.getRestrictionListAccess().getGroup_2(), "rule__RestrictionList__Group_2__0");
					put(grammarAccess.getTypeRestrictionAccess().getGroup(), "rule__TypeRestriction__Group__0");
					put(grammarAccess.getPathExpressionAccess().getPathAlternativesAssignment_0(), "rule__PathExpression__PathAlternativesAssignment_0");
					put(grammarAccess.getPathExpressionAccess().getPathAlternativesAssignment_1_1(), "rule__PathExpression__PathAlternativesAssignment_1_1");
					put(grammarAccess.getPathExpressionAccess().getPathAlternativesAssignment_1_3_2(), "rule__PathExpression__PathAlternativesAssignment_1_3_2");
					put(grammarAccess.getPathAccess().getSegmentsAssignment_0(), "rule__Path__SegmentsAssignment_0");
					put(grammarAccess.getPathAccess().getSegmentsAssignment_1_1(), "rule__Path__SegmentsAssignment_1_1");
					put(grammarAccess.getPathSegmentAccess().getAlternativesAssignment_0_0(), "rule__PathSegment__AlternativesAssignment_0_0");
					put(grammarAccess.getPathSegmentAccess().getAlternativesAssignment_0_1_1(), "rule__PathSegment__AlternativesAssignment_0_1_1");
					put(grammarAccess.getPathSegmentAccess().getAlternativesAssignment_0_1_2_1(), "rule__PathSegment__AlternativesAssignment_0_1_2_1");
					put(grammarAccess.getPathSegmentAccess().getRepeatOperatorAssignment_1(), "rule__PathSegment__RepeatOperatorAssignment_1");
					put(grammarAccess.getPathSegmentDescriptionAccess().getRestrictionListAssignment_1(), "rule__PathSegmentDescription__RestrictionListAssignment_1");
					put(grammarAccess.getRestrictionListAccess().getRestrictionsAssignment_1(), "rule__RestrictionList__RestrictionsAssignment_1");
					put(grammarAccess.getRestrictionListAccess().getRestrictionsAssignment_2_1(), "rule__RestrictionList__RestrictionsAssignment_2_1");
					put(grammarAccess.getImplicitPathDescriptionAccess().getKindAssignment(), "rule__ImplicitPathDescription__KindAssignment");
					put(grammarAccess.getExplicitPathDescriptionAccess().getAssociationNameAssignment(), "rule__ExplicitPathDescription__AssociationNameAssignment");
					put(grammarAccess.getTypeRestrictionAccess().getForbiddenAssignment_0(), "rule__TypeRestriction__ForbiddenAssignment_0");
					put(grammarAccess.getTypeRestrictionAccess().getTypeNameAssignment_1(), "rule__TypeRestriction__TypeNameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.storydriven.storydiagrams.expressions.ui.contentassist.antlr.internal.InternalPathExpressionsParser typedParser = (org.storydriven.storydiagrams.expressions.ui.contentassist.antlr.internal.InternalPathExpressionsParser) parser;
			typedParser.entryRulePathExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PathExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PathExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
